#!/bin/bash
#
# https://argbash.io/generate#generator
#
# ARG_OPTIONAL_SINGLE([context],[C],[docker context name to use])
# ARG_OPTIONAL_SINGLE([host],[H],[docker host name to use])
# ARG_OPTIONAL_SINGLE([container],[c],[container name])
# ARG_OPTIONAL_BOOLEAN([print_uri],[p],[only print vscode container uri])
# ARG_POSITIONAL_SINGLE([path],[path inside container],[])
# ARG_HELP([Start vscode inside docker container])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='CHcph'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_context=
_arg_host=
_arg_container=
_arg_print_uri="off"


print_help()
{
	printf '%s\n' "Start vscode inside docker container"
	printf 'Usage: %s [-C|--context <arg>] [-H|--host <arg>] [-c|--container <arg>] [-p|--(no-)print_uri] [-h|--help] <path>\n' "$0"
	printf '\t%s\n' "<path>: path inside container"
	printf '\t%s\n' "-C, --context: docker context name to use (no default)"
	printf '\t%s\n' "-H, --host: docker host name to use (no default)"
	printf '\t%s\n' "-c, --container: container name (no default)"
	printf '\t%s\n' "-p, --print_uri, --no-print_uri: only print vscode container uri (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-C|--context)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_context="$2"
				shift
				;;
			--context=*)
				_arg_context="${_key##--context=}"
				;;
			-C*)
				_arg_context="${_key##-C}"
				;;
			-H|--host)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_host="$2"
				shift
				;;
			--host=*)
				_arg_host="${_key##--host=}"
				;;
			-H*)
				_arg_host="${_key##-H}"
				;;
			-c|--container)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_container="$2"
				shift
				;;
			--container=*)
				_arg_container="${_key##--container=}"
				;;
			-c*)
				_arg_container="${_key##-c}"
				;;
			-p|--no-print_uri|--print_uri)
				_arg_print_uri="on"
				test "${1:0:5}" = "--no-" && _arg_print_uri="off"
				;;
			-p*)
				_arg_print_uri="on"
				_next="${_key##-p}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-p" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'path'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_path "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


CONTAINER_PATH=$_arg_path

if [ ! -z "$_arg_host" ]; then
	CONTAINER_HOST="$_arg_host"
elif [ ! -z "$_arg_context" ]; then
	CONTAINER_HOST="$(docker context inspect $_arg_context | jq -rj '.[0].Endpoints.docker.Host')"
else
	CONTAINER_HOST="$(docker context inspect | jq -rj '.[0].Endpoints.docker.Host')"
fi

if [ ! -z "$_arg_container" ]; then
	CONTAINER_NAME="$_arg_container"
else
	CONTAINER_NAME="/laradock_app-7.4_1"
fi

CONTAINER_CONFIG="{\"containerName\":\"$CONTAINER_NAME\",\"settings\":{\"host\":\"$HOST\"}}"
CONTAINER_CONFIG_RAW="$(echo -n $CONTAINER_CONFIG | xxd -p -c 100000 | tr -d '\n')"

URI="vscode-remote://attached-container+$CONTAINER_CONFIG_RAW$CONTAINER_PATH"

if [ "$_arg_print_uri" = 'on' ]; then
	echo -n $URI
else
	code --folder-uri "$URI"
fi

# ] <-- needed because of Argbash
